{"version":3,"sources":["Components/Popup.js","Components/AI.js","App.js","serviceWorker.js","index.js"],"names":["Popup","className","this","props","playerChoice","computerChoice","winner","React","Component","AI","prechoice","App","state","player","computer","playerValue","computerValue","showPopup","choice","handleClick","bind","id","getComputerChoice","getWinner","whoWon","setState","setTimeout","rand","Math","random","p","c","class","onClick","style","textAlign","pop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f8c04b5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nclass Popup extends React.Component {\n  render() {\n\n    return (\n      \n      <div className=\"popup\">\n        <div className=\"popup_inner\">\n          <p>Player Choice: {this.props.playerChoice}</p>\n          <p>Computer Choice: {this.props.computerChoice}</p>\n          {this.props.winner === \"computer\"?\n           <div className = \"text-lose\"> <p>Winner: {this.props.winner}</p>\n           </div>\n           : (this.props.winner === \"player\") ?<div className = \"text-win\"> <p>Winner: {this.props.winner}</p>\n           </div>\n           : <div className = \"text-draw\"> <p>Winner: {this.props.winner}</p>\n           </div>\n           \n           }\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Popup;\n","import React from \"react\";\r\nimport { FaHandScissors, FaFistRaised, FaHandPaper } from \"react-icons/fa\";\r\nimport \"../App.css\";\r\n\r\nclass AI extends React.Component {\r\n  render() {\r\n\r\n    return (      \r\n        <div>\r\n            {this.props.prechoice === \"rock\" ?<div>\r\n          <FaFistRaised className = \"FaHand\" />\r\n        </div> : null}\r\n\r\n        {this.props.prechoice === \"paper\" ?<div>\r\n          <FaHandPaper className = \"FaHand\"/>\r\n        </div> : null}\r\n\r\n        {this.props.prechoice === \"scissors\" ?<div>\r\n          <FaHandScissors className = \"FaHand\" />\r\n        </div> : null}\r\n        </div>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nexport default AI;\r\n","import React from \"react\";\nimport Popup from \"./Components/Popup\";\nimport AI from \"./Components/AI\";\nimport { FaHandScissors, FaFistRaised, FaHandPaper } from \"react-icons/fa\";\nimport \"./App.css\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      player: 0,\n      computer: 0,\n      playerValue: \"\",\n      computerValue: \"\",\n      winner: \"\",\n      prechoice: \"\",\n      showPopup: false,\n      choice : false\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(id) {\n\n    let playerValue = id\n    let computerValue = this.getComputerChoice();\n    let winner = this.getWinner(playerValue, computerValue);\n    this.whoWon(winner);\n    this.setState({\n      prechoice : computerValue,\n      computerValue,\n      playerValue,\n      winner,\n      showPopup: !this.state.showPopup,\n      choice: false\n    });\n    setTimeout(() => {\n      this.setState({\n        showPopup: false\n      });\n     }, 4000);\n    }\n \n  pop()\n{\n  setTimeout(() => {  \n    this.setState({\n      choice: true\n    }); \n  },3050) \n}\n\n\n\n  whoWon(winner) {\n    if (winner === \"player\") {\n      this.setState(state => {\n        return { player: state.player + 1 };\n      });\n    } else if (winner === \"computer\") {\n      this.setState(state => {\n        return { computer: state.computer + 1 };\n      });\n    }\n  }\n  getComputerChoice() {\n    const rand = Math.random();\n    if (rand < 0.34) {\n      return \"rock\";\n    } else if (rand <= 0.67) {\n      return \"paper\";\n    } else {\n      return \"scissors\";\n    }\n  }\n\n  // Get game winner\n  getWinner(p, c) {\n    if (p === c) {\n      return \"draw\";\n    } else if (p === \"rock\") {\n      if (c === \"paper\") {\n        return \"computer\";\n      } else {\n        return \"player\";\n      }\n    } else if (p === \"paper\") {\n      if (c === \"scissors\") {\n        return \"computer\";\n      } else {\n        return \"player\";\n      }\n    } else if (p === \"scissors\") {\n      if (c === \"rock\") {\n        return \"computer\";\n      } else {\n        return \"player\";\n      }\n    }\n  }\n\n\n    \n  \n  render() {\n\n    return (\n      <>\n\n          <div class=\"container mt-3\">\n<div class=\"d-flex justify-content-center bg-secondary mb-3\">\n    <div class=\"p-2\">\n    <header className=\"header\">\n            <h1>Rock Paper Scissors</h1>\n            <button id=\"restart\" className=\"restart-btn\">\n              Restart Game\n            </button>\n            <div id=\"score\" className=\"score\">\n              <p>Player: {this.state.player}</p>\n              <p>Computer: {this.state.computer}</p>\n            </div>\n          </header>\n\n          <h2>Make Your Selection</h2>\n          <h3 > PLAYER </h3>\n          <br></br>\n\n          </div>       \n       </div>\n        </div>\n\n\n          <div class=\"container-fluid\">\n  <div class=\"row\">\n  <div className=\"choices\">\n    <div class=\"col-4\"><div id=\"rock\" className=\"choice\" onClick={() => this.handleClick('rock')}>\n              <FaFistRaised className = \"FaHand\"/>\n            </div></div>\n    <div class=\"col-4]\"> <div id=\"paper\" className=\"choice\" onClick={() => this.handleClick('paper')}>\n              <FaHandPaper className = \"FaHand\"/>\n            </div></div>\n    <div class=\"col-4\"><div id=\"scissors\" className=\"choice\" onClick={() => this.handleClick('scissors')}>\n              <FaHandScissors className = \"FaHand\"/>\n            </div></div>\n           \n            </div>\n  </div>\n</div>\n      \n\n<div class=\"container mt-3\">\n<div class=\"d-flex justify-content-center bg-secondary mb-3\">\n    <div class=\"p-5S\"> \n<br></br>\n<div style ={{textAlign:\"center\"}}> <h3> AI </h3></div>\n<br></br>\n\n  </div>\n  </div>\n  </div>\n\n\n<div class=\"container mt-3\">\n<div class=\"d-flex justify-content-center bg-secondary mb-3\">\n    <div class=\"p-2  \">  <div > {this.state.showPopup ?<AI  prechoice ={ this.state.prechoice} choice={this.state.choice}/>: null}</div>\n    </div>\n\n  </div>\n  </div>\n\n        {this.pop()}\n             {this.state.showPopup && this.state.choice === true ? \n             (<Popup\n             playerChoice={this.state.playerValue}\n             computerChoice={this.state.computerValue}\n             winner={this.state.winner}/>): null\n             }\n    \n        \n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}